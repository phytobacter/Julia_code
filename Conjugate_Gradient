function CG_method(n,on,A,b)

    bt = spzeros(n+1); bt[1] = norm(b)
    alpha = spzeros(n)
    p = spzeros(n)
    mu = spzeros(n)
    n_eta = spzeros(n)
    resid = ones(n)

    V = spzeros(n,n+1); V[:,1] = b / norm(b)
    C = spzeros(n,n)
    X = spzeros(n,n+1)


    for i=1:n
        if i==1
            w = A*V[:,i]
        else
            w = A*V[:,i] - bt[i]*V[:,i-1]
        end

        alpha[i] = transpose(V[:,i])*w
        w = w-alpha[i]*V[:,i]
        bt[i+1] = norm(w)
        V[:,i+1] = w/bt[i+1]

        if i == 1
            mu[i] = 0
            n_eta[i] = sqrt(alpha[i])
            p[i] = bt[i]/n_eta[i]
            C[:,i] = V[:,i]/n_eta[i]
        else
            mu[i] = bt[i]/n_eta[i-1]
            n_eta[i] = sqrt(alpha[i] - (mu[i])^2)
            p[i] = -mu[i]*p[i-1]/n_eta[i]
            C[:,i] = (V[:,i]-mu[i]*C[:,i-1])/n_eta[i]
        end
        X[:,i+1] = X[:,i]+p[i]*C[:,i]

        #T = (spdiagm((bt[2:i],alpha[1:i],bt[2:i]),(-1,0,1)))
        #e1 = zeros(size(T,1))
        #e1[1] = 1
        #z = T\(norm(b)*e1)
        #resid[i] = (norm(norm(b)*e1-T*z))/norm(b)
        resid[i] = norm(b - A*X[:,i])/norm(b)
    end

    return (X[:,n+1],resid)
end
